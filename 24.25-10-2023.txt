//for java maven repository
//for node npm


Collections:
------------
Types:
   List
   Set 
   Map

List:  ---->ArrayList[commonly used]
            -dynamic array to store the duplicate element of different data types
            -maintains the insertion order and is non-synchronized
       ---->LinkedList
            -maintains the insertion order and is not synchronized.
       ---->VectorList


Set: -------->Set<data-type> s1 = new HashSet<data-type>(); 
              -epresents the collection that uses a hash table for storage. 
              Hashing is used to store the elements in the HashSet. 
              It contains unique items. 
     -------->Set<data-type> s2 = new LinkedHashSet<data-type>(); 
              -contains unique elements. 
              -It maintains the insertion order and permits null elements. 
     -------->Set<data-type> s3 = new TreeSet<data-type>(); 
             -TreeSet also contains unique elements. 
             -the access and retrieval time of TreeSet is quite fast. 
             -The elements in TreeSet stored in ascending order.


Map: --------->HashMap
               HashMap is the implementation of Map,
                but it doesn't maintain any order.
    ---------->LinkedHashMap
               LinkedHashMap is the implementation of Map. 
               It inherits HashMap class. It maintains insertion order.
    ----------->TreeMap	
                TreeMap is the implementation of Map and SortedMap. 
                It maintains ascending order.


File Handling:
-------------

using fileReader we can read a file.
using fileWriter we can write in file.

Unit Testing:
------------
we need to set dependencies in pom xml file
<dependency>
	<groupId>org.junit.jupiter</groupId>
	<artifactId>junit-jupiter-params</artifactId>
	<version>5.2.0</version>
	<scope>test</scope>
</dependency>
for testing we need to create object for the class in which 
the method is defined.

we need to specify @Test to test the particular function.


 
